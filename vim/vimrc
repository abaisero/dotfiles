"" vundle
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
"" plugins
Plugin 'VundleVim/Vundle.vim'
" genpurpose
Plugin 'scrooloose/syntastic.git'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-dispatch'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'Valloric/YouCompleteMe'
Plugin 'argtextobj.vim'
Plugin 'vim-scripts/BufOnly.vim'
" edit
Plugin 'sjl/gundo.vim'
" navigation
Plugin 'tpope/vim-vinegar'
Plugin 'ctrlpvim/ctrlp.vim'
" python
Plugin 'tmhedberg/SimpylFold'
Plugin 'tell-k/vim-autopep8'
" latex
Plugin 'vim-latex/vim-latex'
" markdown
Plugin 'tpope/vim-markdown'
" style
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'altercation/vim-colors-solarized'
" testing
Plugin 'majutsushi/tagbar'
" Plugin 'scrooloose/nerdtree'
Plugin 'vimwiki/vimwiki'
Plugin 'jceb/vim-orgmode'
Plugin 'tpope/vim-speeddating'
" util
Plugin 'vim-scripts/utl.vim'
Plugin 'tpope/vim-repeat'
Plugin 'chrisbra/NrrwRgn'
Plugin 'mattn/calendar-vim'
"
" notes
""
call vundle#end()
filetype plugin indent on
""
"" options
syntax on
let mapleader = ' '
let maplocalleader = ','
" sentence followed by double space
set cpo+=J
" change buffer without closing the previous ones
set hidden
" backup files
set backupdir=~/.vim_backup//
set noswapfile
set undodir=~/.vim_undo//
" history and undo
set history=1000
set undolevels=1000
" backspace over anything in insert
set backspace=indent,eol,start
" automatically reload changed buffers
set autoread
" status-line
set laststatus=2
" show partial command while typing
set showcmd
" show cursor position
set ruler
set cursorline
" enables copy/paste between vim instances
set clipboard=unnamed
" search options
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
" ignore case when looking for files to open
set wildignorecase
" expand tabs as white-spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
" cursor always in the middle of the screen
set scrolloff=999
" line numbers
set relativenumber
set number
" to execute bash commands
set shell=/bin/zsh
" indentation
set autoindent
" set smartindent
" set cindent
" visually see the 80st column
set colorcolumn=80
" tab-completion behaves as in the terminal
set wildmenu
" more natural split directions
set splitbelow
set splitright
" tex
let g:tex_flavor='latex'
""
"" mappings
" edit/re-load vimrc file
nnoremap <leader>ev :edit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
" very magic search
nnoremap / /\v
vnoremap / /\v
" never go in ex mode again
noremap Q <nop>
noremap gQ <nop>
" exit insert mode
inoremap kj <esc>
" file movement
nnoremap j gj
nnoremap k gk
noremap J <C-d>
noremap K <C-u>
" line formatting
noremap <leader>i mmvip=`m
noremap <leader>j J
noremap <leader>k mmvipgq`m
" edit
noremap <leader>u :GundoToggle<cr>
" reselect text that was just pasted
noremap <leader>v V`]
" buffer and window movements
noremap <C-u> :bp<cr>
noremap <C-i> :bn<cr>
" vim-latex uses IMAP which creates C-j mapping.
" This changes the default 
imap <C-b> <Plug>IMAP_JumpForward
nmap <C-b> <Plug>IMAP_JumpForward
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" window splits
" noremap <C-m> :split<cr>
" noremap <C-n> :vsplit<cr>
""
"" autocmds
"" tex
"augroup ft_tex
"  autocmd!
"  autocmd FileType plaintex setlocal spell spelllang=en_us
"  autocmd FileType plaintex syntax spell toplevel
"  " autocmd FileType plaintex set smartindent
"augroup END
""
"" launch
augroup ft_launch
  autocmd!
  autocmd BufRead,BufNewFile *.launch set filetype=launch
  autocmd BufReadPost *.launch set syntax=html
augroup END
""
"" tikz
augroup ft_tikz
  autocmd!
  autocmd BufRead,BufNewFile *.tikz setlocal filetype=tex
augroup END
""
"" kvg
augroup ft_kvg
  autocmd!
  autocmd BufRead,BufNewFile *.kvg setlocal filetype=kvg
augroup END
""
"" latest_line
augroup latest_line
  autocmd!
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   execute 'normal! g`"zvzz' |
  \ endif
augroup END
""
"" spell
augroup spell
  autocmd!
  autocmd Filetype markdown,plaintex command! -nargs=* Aspell Start aspell -l en_UK <args> -c %
augroup END
""
""
"" plugin options
"" solarized
set term=screen-256color
let g:solarized_termtrans=0
let g:solarized_termcolors=256
set background=dark
colorscheme solarized
""
"" vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
""
"" syntastic
"set statusline+=%=
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
" generic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
" cpp
let g:syntastic_cpp_compiler_options = ' -std=c++11'
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_include_dirs = [ '/home/bais/git/mlr/share/src/', '/home/bais/git/mlr/share/projects/temporal_segmentation/dist/' ]
" python
let g:syntastic_python_checkers = [ 'flake8' ]
let g:syntastic_python_flake8_args = '--ignore="E501,E402"'
""
"" vim-commentary
augroup commentary
  autocmd!
  autocmd FileType cpp    set commentstring=//\ %s
  autocmd FileType h      set commentstring=//\ %s
  autocmd FileType c      set commentstring=//\ %s
  autocmd FileType css    set commentstring=/\*\ %s\ \*/
  autocmd FileType less   set commentstring=//\ %s
  autocmd FileType mtcfg  set commentstring=#\ %s
  autocmd FileType ors    set commentstring=#\ %s
  autocmd FileType cf     set commentstring=#\ %s
  autocmd FileType cmake  set commentstring=#\ %s
  autocmd FileType notes  set commentstring=#\ %s
  autocmd FileType matlab set commentstring=%\ %s
  autocmd FileType kv     set commentstring=#\ %s
  autocmd FileType kvg    set commentstring=#\ %s
  autocmd FileType launch set commentstring=<!--\ %s\ -->
  autocmd FileType markdown set commentstring=;;\ %s
augroup END
""
"" autopep8
" nnoremap <F8> :call Autopep8()<CR>
let g:autopep8_disable_show_diff=1
let g:autopep8_ignore="E501"
""
"" vim-fugitive
" nnoremap <leader>gc :Gcommit<cr>
" nnoremap <leader>gd :Gdiff<cr>
" nnoremap <leader>gs :Gstatus<cr>
" nnoremap <leader>gb :Gblame<cr>
" nnoremap <leader>gps :Gpush<cr>
" nnoremap <leader>gpl :Gpull<cr>
" nnoremap <leader>gw :Gwrite<cr>
""
"" ctrlp
" nnoremap <F5> :CtrlPClearCache<cr>
nnoremap <C-t> :CtrlPTag<cr>
let g:ctrlp_cmd = 'CtrlPMixed'
" let g:ctrlp_match_window = 'order:ttb'
let g:ctrlp_max_files=0
let g:ctrlp_max_depth=40
""
"" tagbar
" nnoremap <leader>t :TagbarToggle<cr>
nnoremap <leader>t :TagbarOpenAutoClose<cr>
""
"" YouCompleteMe
let g:ycm_confirm_extra_conf = 0
let g:ycm_collect_identifiers_from_tags_files = 1
map <leader>g :YcmCompleter GoTo<cr>
""
"" SimpylFold
let g:SimpylFold_fold_import = 0
""
"" vim-easytags
set tags=./tags;..
let g:easytags_dynamic_files = 1
let g:easytags_auto_highlight = 0
""
"" gundo
let g:gundo_preview_bottom=1
""
"" vimorg
let g:org_heading_shade_leading_stars = 0
""
""

" testing... from steve losh
set wrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=80

" autocmd InsertEnter * set list
" autocmd InsertLeave * set list listchars=trail:â˜  

" highlight ExtraWhitespace ctermbg=red guibg=red
" match ExtraWhitespace /\s\+$/
" autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
" autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
" autocmd InsertLeave * match ExtraWhitespace /\s\+$/
" autocmd BufWinLeave * call clearmatches()

"" functions
" remove trailing whitespace
fun! TrimWhitespace()
  let l:save = winsaveview()
  %s/\s\+$//e
  call winrestview(l:save)
endfun
""
