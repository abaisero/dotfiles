" leader
let mapleader = " "
" syntax recognition stuff
filetype indent on
syntax on

" Bundles {{{
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
" Plugin 'user/L9', {'name': 'newL9'}

" BAIS - my added repos
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'sjl/splice.vim'
Plugin 'Lokaltog/powerline'
Plugin 'vim-scripts/delimitMate.vim'
Plugin 'vim-scripts/argtextobj.vim'
" Plugin 'vim-scripts/a.vim'
Plugin 'kana/vim-textobj-user'
Plugin 'kana/vim-textobj-line'
Plugin 'kana/vim-textobj-indent'
Plugin 'Julian/vim-textobj-brace'
Plugin 'Julian/vim-textobj-variable-segment'

Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-notes'

" Plugin 'Valloric/YouCompleteMe.git'
Plugin 'SirVer/ultisnips'
Plugin 'bigblindbais/vim-snippets.git'
Plugin 'scrooloose/syntastic.git'
Plugin 'fholgado/minibufexpl.vim'
Plugin 'ctags.vim'
Plugin 'altercation/vim-colors-solarized'
" Plugin 'flazz/vim-colorschemes'

" vim-scripts repos
Plugin 'L9'
Plugin 'FuzzyFinder'
" ...

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugins
"
" see :h vundle for more details or wiki for FAQ

"}}}
" Options {{{
" history and undo
set history=1000
set undolevels=1000
" backspace over anything in insert
set backspace=indent,eol,start
" automatically reload changed buffers
set autoread
" buffer-specific status info, under each window
set laststatus=2
set statusline=%5l/%L\ %y\ %f\ %m
set cmdheight=2
" quick tty update
set ttyfast
set title
" shows partial command while typing
set showcmd
" show row and col of cursor
set ruler
set cursorline
" enables copy/paste between vim instances
set clipboard=unnamed
" when searching, get partial results live
set showmatch
set hlsearch
set incsearch
set ignorecase
set smartcase
" ignore case when looking for files to open
set wildignorecase
" expand tabs as white-spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
" sets cursor always at the middle of the screen
set scrolloff=999
" prints line number
set relativenumber
set number
" folding
set foldlevelstart=0
set foldmethod=marker
set foldnestmax=2
" indenting options
set autoindent
set smartindent
" visually see the 81st column
set colorcolumn=81
"set textwidth=80
" to execute bash commands
set shell=/bin/zsh
" Tab-completion behaves as in the terminal
set wildmenu
" Fold-text function {{{
function! MyFoldText()
  let line = getline(v:foldstart)

  let nucolwidth = &fdc + &number * &numberwidth
  let windowwidth = winwidth(0) - nucolwidth - 3
  let foldedlinecount = v:foldend - v:foldstart

  " expand tabs into spaces
  let onetab = strpart('  ', 0, &tabstop)
  let line = substitute(line, '\t', onetab, 'g')

  let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
  let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
  return foldedlinecount. " lines: ". line
endfunction
"}}}
set foldtext=MyFoldText()
"}}}

" powerline?
" set encoding=utf-8
" set termencoding=
" solarized {{{
set term=screen-256color
let g:solarized_termtrans=0
let g:solarized_termcolors=256
set background=dark
colorscheme solarized

" }}}
" python syntax
let python_highlight_all=1

" UltiSnips
set runtimepath+=~/.vim/bundle/vim-snippets/UltiSnips
" let g:UltiSnipsExpandTrigger="\\"
" let g:UltiSnipsJumpForwardTrigger="<c-j>"
" let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" Custom commands {{{
" Modes {{{
" exit insert mode
inoremap kj <esc>
inoremap <esc> <nop>
"}}}
" Moving {{{
" to move around through 'graphical' lines
noremap j gj
noremap k gk
noremap J <C-D>
noremap K <C-U>
noremap H 0
noremap L $
" Movement Mappings
onoremap ip i(
onoremap ap a(
onoremap is i[
onoremap as a[
onoremap ic i{
onoremap ac a{
"}}}
" Formatting {{{
" to join and reformat a line with the next
nnoremap y :join<CR>
"}}}
" Folds {{{
" to next/prev fold
noremap fj zj
noremap fk zk
" to beginning/end of fold
noremap fJ ]z
noremap fK [z
" to open/close fold
noremap fl zo
noremap fh zc
noremap ff za
" to open/close all
noremap fH zM
noremap fL zR
" }}}
" Tabs {{{
" moves through tabs (replaces resizes)
noremap <C-u> :bp<cr>
noremap <C-i> :bn<cr>
noremap <C-m> :split<cr>
noremap <C-n> :vsplit<cr>
" moves cursor through tabs
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" resize current window by +/- 1
noremap <C-y> :vertical resize -1<cr>
noremap <C-o> :vertical resize +1<cr>
" }}}
" Misc {{{
" To save even write-protected files
noremap <Leader>w :w !sudo tee % > /dev/null
"compile pdflatex
nnoremap <leader>l :!pdflatex %<cr>
" execute with python
nnoremap <leader>p :!python %<cr>
"}}}

" . should act as expected (repeat) in visual mode
vnoremap . :norm.<CR>

" Open files {{{
nnoremap <leader>ev :split $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
" }}}
" Typos & other abbreviations {{{
iabbrev teh the
" }}}
" ctags {{{
"map <F12> :!ctags --verbose -R --sort=yes --c++-kinds=+p --fields=iaS --extra=+q .<cr>
set tagstack
set tags=$HOME/git/mlr/share/tags
" }}}
" programming {{{
nnoremap <F5> :Make<cr>
"}}}
" Auto-Commands {{{
" spelling in tex files
augroup tex
  autocmd!
  autocmd FileType tex setlocal spell spelllang=en_us
  autocmd FileType tex syntax spell toplevel
augroup END
" set filetype for Ors files
augroup ft_ors
  autocmd!
  autocmd BufRead,BufNewFile *.ors setlocal filetype=ors
augroup END
" set filetype for KeyValueGraphs
augroup ft_kvg
  autocmd!
  autocmd BufRead,BufNewFile *.kvg setlocal filetype=kvg
augroup END
" return to last line when reopening file
augroup latest_line
  autocmd!
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   execute 'normal! g`"zvzz' |
  \ endif
augroup END
" }}}
" MLR {{{
source ~/git/mlr/tools/ors.vim
source ~/git/mlr/tools/kvg.vim
" }}}
" Git-Fugitive {{{
noremap <leader>gs :Gstatus<cr>
noremap <leader>gd :Gdiff<cr>
noremap <leader>gb :Gblame<cr>
noremap <leader>gw :Gwrite<cr>
noremap <leader>gc :Gcommit<cr>
"}}}
" Syntastic {{{
" let g:syntastic_cpp_checkers = ['gcc']
let g:syntastic_cpp_compiler_options = ' -std=c++11'
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_include_dirs = [ '/home/bais/git/mlr/share/src/' ]

" set to 1 if you want to check on open..
" for now, just check when you press F6 or something..
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_highlighting = 0
let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_debug = 1
" let g:syntastic_error_symbol = "E"
" let g:syntastic_style_error_symbol = "e"
" let g:syntastic_warning_symbol = "W"
" let g:syntastic_style_warning_symbol = "w"
noremap <C-[> :lprev<cr>
noremap <C-]> :lnext<cr>
"}}}
" vim-commentary {{{
autocmd FileType cpp    set commentstring=//\ %s
autocmd FileType h      set commentstring=//\ %s
autocmd FileType c      set commentstring=//\ %s
autocmd FileType ors    set commentstring=#\ %s
autocmd FileType cf     set commentstring=#\ %s
autocmd FileType kvg    set commentstring=#\ %s
autocmd FileType cmake  set commentstring=#\ %s
" }}}
" vim-notes {{{
let g:notes_directories = ['~/notes']
let g:notes_suffix = '.vim-note'
let g:notes_list_bullets = ['•', '▸', '▪']
" }}}
" MiniBufExpl {{{
let g:miniBufExplModSelTarget = 1
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplShowBufNumbers = 0
"}}}
" YouCompleteMe {{{
" let g:ycm_server_keep_logfiles = 1
" let g:ycm_extra_conf_globlist = ['~/git/mlr/share/*']
" let g:ycm_collect_identifiers_from_tags_files = 1
" let g:ycm_show_diagnostics_ui = 0
"noremap gd :YcmCompleter GoToDeclaration<cr>
" let g:ycm_semantic_triggers =  {
"   \   'c' : ['->', '.'],
"   \   'objc' : ['->', '.'],
"   \   'cpp,objcpp' : ['->', '.', '::'],
"   \   'lua' : ['.', ':'],
"   \ }
" }}}
" Latex {{{
let g:tex_flavor='latex'
" }}}

" to organize {{{
" command! D execute "read !date '+\\#\\#\\# \\%F' . read !date"
" }}}
"
" line as text object
" call textobj#user#plugin('line', {
" \   '-': {
" \     'select-a-function': 'CurrentLineA',
" \     'select-a': 'aP',
" \     'select-i-function': 'CurrentLineI',
" \     'select-i': 'iP',
" \   },
" \ })

" function! CurrentLineA()
"   normal! 0
"   let head_pos = getpos('.')
"   normal! $
"   let tail_pos = getpos('.')
"   return ['v', head_pos, tail_pos]
" endfunction

" function! CurrentLineI()
"   normal! ^
"   let head_pos = getpos('.')
"   normal! g_
"   let tail_pos = getpos('.')
"   let non_blank_char_exists_p = getline('.')[head_pos[2] - 1] !~# '\s'
"   return
"   \ non_blank_char_exists_p
"   \ ? ['v', head_pos, tail_pos]
"   \ : 0
" endfunction
