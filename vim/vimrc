" leader
let mapleader = " "
" syntax recognition stuff
filetype indent on
syntax on

" Bundles {{{
set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" My Bundles here:
"
" preinstalled original repos on github
Bundle 'Lokaltog/vim-easymotion'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'tpope/vim-rails.git'

" BAIS - my added repos
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-git'
Bundle 'Valloric/YouCompleteMe.git'
"Bundle 'scrooloose/syntastic.git'
Bundle 'scrooloose/nerdtree.git'
Bundle 'scrooloose/nerdcommenter.git'
Bundle 'fholgado/minibufexpl.vim'
Bundle 'ctags.vim'
Bundle 'majutsushi/tagbar.git'
Bundle 'altercation/vim-colors-solarized'
Bundle 'flazz/vim-colorschemes'

" vim-scripts repos
Bundle 'L9'
Bundle 'FuzzyFinder'
" non github repos
Bundle 'git://git.wincent.com/command-t.git'
" ...

filetype plugin indent on     " required!
"
" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..
"}}}
 
" Options {{{
" history and undo
set history=1000
set undolevels=1000
" backspace over anything in insert
set backspace=indent,eol,start
" automatically reload changed buffers
set autoread
" buffer-specific status info, under each window
set laststatus=1
set statusline=%5l/%L\ %y\ %f\ %m
set cmdheight=2
" quick tty update
set ttyfast
set title
" shows partial command while typing
set showcmd
" show row and col of cursor
set ruler
set cursorline
" enables copy/paste between vim instances
set clipboard=unnamed
" when searching, get partial results live
set showmatch
set hlsearch
set incsearch
set ignorecase
set smartcase
" expand tabs as white-spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
" sets cursor always at the middle of the screen
set scrolloff=999
" prints line number
set relativenumber
set number
" folding
set foldlevelstart=0
set foldmethod=marker
set foldnestmax=2
" indenting options
set autoindent
set smartindent
" visually see the 81st column
set colorcolumn=81
"set textwidth=80
" to execute bash commands
set shell=/bin/zsh
" Tab-completion behaves as in the terminal
set wildmenu
" Fold-text function {{{
function! MyFoldText()
  let line = getline(v:foldstart)

  let nucolwidth = &fdc + &number * &numberwidth
  let windowwidth = winwidth(0) - nucolwidth - 3
  let foldedlinecount = v:foldend - v:foldstart

  " expand tabs into spaces
  let onetab = strpart('  ', 0, &tabstop)
  let line = substitute(line, '\t', onetab, 'g')

  let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
  let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
  return foldedlinecount. " lines: ". line
endfunction
"}}}
set foldtext=MyFoldText()
"}}}

" cool colorscheme
let g:solarized_contrast="high"
let g:solarized_visibility="high"
let g:solarized_diffmode="high"
let g:solarized_hitrail=0
let g:solarized_termtrans=1
let g:solarized_termcolors=256
colorscheme solarized
set background=dark
"hi normal   ctermfg=black  ctermbg=white
" python syntax
let python_highlight_all=1

" Custom commands {{{
" Modes {{{
" exit insert mode
inoremap kj <esc>
inoremap <esc> <nop>
"}}}
" Moving {{{
" to move around through 'graphical' lines
noremap j gj
noremap k gk
noremap J <C-D>
noremap K <C-U>
noremap H 0
noremap L $
" Movement Mappings
onoremap ip i(
onoremap ap a(
onoremap is i[
onoremap as a[
onoremap ic i{
onoremap ac a{
"}}}
" Formatting {{{
" to join and reformat a line with the next
nnoremap y :join<CR>gqq
"}}}
" Folds {{{
" to next/prev fold
noremap fj zj
noremap fk zk
" to beginning/end of fold
noremap fJ ]z
noremap fK [z
" to open/close fold
noremap fl zo
noremap fh zc
noremap ff za
" to open/close all
noremap fH zM
noremap fL zR
" }}}
" Tabs {{{
" moves through tabs (replaces resizes)
noremap <C-u> :bp<cr>
noremap <C-i> :bn<cr>
noremap <C-m> :split<cr>
noremap <C-n> :vsplit<cr>
" moves cursor through tabs
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" resize current window by +/- 1
noremap <C-y> :vertical resize -1<cr>
noremap <C-o> :vertical resize +1<cr>
" }}}
" Misc {{{
" To save even write-protected files
noremap <Leader>w :w !sudo tee % > /dev/null
"compile pdflatex
nnoremap <leader>l :!pdflatex %<cr>
" make with makefile
nnoremap <leader>m :make<cr>
" execute x.exe
nnoremap <leader>x :!./x.exe<cr>
" execute with python
nnoremap <leader>p :!python %<cr>
"}}}
" Open files {{{
nnoremap <leader>ev :split $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
" }}}
" Typos & other abbreviations {{{
iabbrev teh the
" }}}
" ctags {{{
"map <F12> :!ctags --verbose -R --sort=yes --c++-kinds=+p --fields=iaS --extra=+q .<cr>
set tagstack
set tags=$HOME/git/mlr/share/tags
" }}}
"}}}
" Auto-Commands {{{
" spelling in tex files
augroup tex
  autocmd!
  autocmd FileType tex setlocal spell spelllang=en_us
  autocmd FileType tex syntax spell toplevel
augroup END
augroup ft_ors
  autocmd!
  autocmd BufRead,BufNewFile *.ors setlocal filetype=ors
augroup END
augroup ft_kvg
  autocmd!
  autocmd BufRead,BufNewFile *.kvg setlocal filetype=kvg
augroup END
augroup latest_line
  autocmd!
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   execute 'normal! g`"zvzz' |
  \ endif
augroup END
" }}}
" MLR {{{
source ~/git/mlr/tools/ors.vim
source ~/git/mlr/tools/kvg.vim
" }}}
" Git-Fugitive {{{
noremap <leader>gs :Gstatus<cr>
noremap <leader>gd :Gdiff<cr>
noremap <leader>gb :Gblame<cr>
noremap <leader>gw :Gwrite<cr>
noremap <leader>gc :Gcommit<cr>
"}}}
" Syntastic {{{
let g:syntastic_cpp_compiler_options = ' -std=c++11'
let g:syntastic_check_on_open = 1
let g:syntastic_always_populate_loc_list = 1
noremap [[ :prev<cr>
noremap ]] :next<cr>
"}}}
" NERDCommenter {{{
noremap cc :call NERDComment(0, 'toggle')<cr>
"}}}
" MiniBufExpl {{{
let g:miniBufExplModSelTarget = 1
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplShowBufNumbers = 0
"}}}
" YouCompleteMe {{{
let g:ycm_server_keep_logfiles = 1
let g:ycm_extra_conf_globlist = ['~/git/mlr/share/*']
let g:ycm_collect_identifiers_from_tags_files = 1
"noremap gd :YcmCompleter GoToDeclaration<cr>
"}}}
" TagBar {{{
"noremap <leader>t :TagbarOpenAutoClose<cr>
noremap <leader>t :TagbarToggle<cr>
noremap gf <c-]>
noremap gn :tn<cr>
noremap gp :tp<cr>
noremap gl :ts<cr>
"nnoremap <C-h> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
"nnoremap <C-]> :tjump <C-r><C-w><CR>
" }}}
" Latex {{{
let g:tex_flavor='latex'
" }}}

