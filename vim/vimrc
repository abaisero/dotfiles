"" vundle
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
"" plugins
Plugin 'VundleVim/Vundle.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/syntastic.git'
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-dispatch'
Plugin 'tell-k/vim-autopep8'
Plugin 'altercation/vim-colors-solarized'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'Valloric/YouCompleteMe'
Plugin 'argtextobj.vim'
""
call vundle#end()
filetype plugin indent on
""
"" options
syntax on
let mapleader = ' '
" change buffer without closing the previous ones
set hidden
" backup files
set backupdir=~/.vim_backup//
set noswapfile
set undodir=~/.vim_undo//
" history and undo
set history=1000
set undolevels=1000
" backspace over anything in insert
set backspace=indent,eol,start
" automatically reload changed buffers
set autoread
" status-line
set laststatus=2
set statusline=%5l/%L\ %y\ %f\ %m
set cmdheight=2
" show partial command while typing
set showcmd
" show cursor position
set ruler
set cursorline
" enables copy/paste between vim instances
set clipboard=unnamed
" search options
set showmatch
set hlsearch
set incsearch
set ignorecase
set smartcase
" ignore case when looking for files to open
set wildignorecase
" expand tabs as white-spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
" cursor always in the middle of the screen
set scrolloff=999
" line numbers
set relativenumber
set number
" to execute bash commands
set shell=/bin/zsh
" indentation
set autoindent
" set smartindent
set cindent
" visually see the 81st column
set colorcolumn=81
" tab-completion behaves as in the terminal
set wildmenu
" tex_flavor
let g:tex_flavor='latex'
""
"" mappings
" edit/re-load vimrc file
nnoremap <leader>ev :edit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
" never go in ex mode again
noremap Q <nop>
" exit insert mode
inoremap kj <esc>
inoremap <esc> <nop>
" file movement
noremap j gj
noremap k gk
noremap J <C-d>
noremap K <C-u>
"noremap J <C-D>
"noremap K <C-U>
" line formatting
nnoremap <leader>j J
nnoremap <leader>k vipgq
set cpo+=J
" tab movements
noremap <C-u> :bp<cr>
noremap <C-i> :bn<cr>
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
" tab splits
noremap <C-m> :split<cr>
noremap <C-n> :vsplit<cr>
" tab split resize
noremap <C-o> :vertical resize +5<cr>
noremap <C-y> :vertical resize -5<cr>
"" misc mappings
" dispatch latexmk
noremap <leader>l :Dispatch! latexmk<cr>
" clean latexmk junk
noremap <leader>Ã² :Dispatch! latexmk -c<cr>
" insert semi-colon at the end of the line
nnoremap ; m`A;<esc>``
""
""
"" fold methods
function! GetVimFold(lnum)
  if getline(a:lnum) =~? '\v^\s*$'
    return '-1'
  elseif getline(a:lnum) =~? '\v^""\s*$'
    return 's1'
  elseif getline(a:lnum) =~? '\v^""'
    return 'a1'
  endif
  return '='
endfunction
""
"" autocmds
augroup ft_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=expr
  autocmd FileType vim setlocal foldexpr=GetVimFold(v:lnum)
  " autocmd FileType vim setlocal foldcolumn=1
augroup END
augroup ft_tex
  autocmd!
  autocmd FileType plaintex setlocal spell spelllang=en_us
  autocmd FileType plaintex syntax spell toplevel
  " autocmd FileType plaintex set smartindent
augroup END
augroup ft_launch
  autocmd!
  autocmd BufRead,BufNewFile *.launch set filetype=launch
  autocmd BufReadPost *.launch set syntax=html
augroup END
augroup ft_tikz
  autocmd!
  autocmd BufRead,BufNewFile *.tikz setlocal filetype=tex
augroup END
augroup ft_kvg
  autocmd!
  autocmd BufRead,BufNewFile *.kvg setlocal filetype=kvg
augroup END
augroup latest_line
  autocmd!
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   execute 'normal! g`"zvzz' |
  \ endif
augroup END
""
"" plugin options
"" solarized
set term=screen-256color
let g:solarized_termtrans=0
let g:solarized_termcolors=256
set background=dark
colorscheme solarized
""
"" vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
""
"" syntastic
"set statusline+=%=
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
" generic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
" cpp
let g:syntastic_cpp_compiler_options = ' -std=c++11'
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_include_dirs = [ '/home/bais/git/mlr/share/src/', '/home/bais/git/mlr/share/projects/temporal_segmentation/dist/' ]
" python
let g:syntastic_python_checkers = [ 'flake8' ]
let g:syntastic_python_flake8_args = '--ignore="E501,E402"'
""
"" vim-commentary
augroup commentary
  autocmd!
  autocmd FileType cpp    set commentstring=//\ %s
  autocmd FileType h      set commentstring=//\ %s
  autocmd FileType c      set commentstring=//\ %s
  autocmd FileType css    set commentstring=/\*\ %s\ \*/
  autocmd FileType less   set commentstring=//\ %s
  autocmd FileType mtcfg  set commentstring=#\ %s
  autocmd FileType ors    set commentstring=#\ %s
  autocmd FileType cf     set commentstring=#\ %s
  autocmd FileType cmake  set commentstring=#\ %s
  autocmd FileType notes  set commentstring=#\ %s
  autocmd FileType matlab set commentstring=%\ %s
  " autocmd FileType kv     set commentstring=#\ %s
  autocmd FileType kvg    set commentstring=#\ %s
  autocmd FileType launch set commentstring=<!--\ %s\ -->
  autocmd FileType markdown set commentstring=;\ %s
augroup END
""
"" autopep8
" nnoremap <F8> :call Autopep8()<CR>
let g:autopep8_disable_show_diff=1
let g:autopep8_ignore="E501"
""
"" vim-fugitive
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gps :Gpush<cr>
nnoremap <leader>gpl :Gpull<cr>
nnoremap <leader>gw :Gwrite<cr>
""
"" ctrlp
" nnoremap <F5> :CtrlPClearCache<cr>
nnoremap <C-t> :CtrlPTag<cr>
let g:ctrlp_cmd = 'CtrlPMixed'
" let g:ctrlp_match_window = 'order:ttb'
""
"" YouCompleteMe
let g:ycm_collect_identifiers_from_tags_files = 0
""
""
" nnoremap <F12> :!ctags -R .<cr>
set tags=./tags;
let g:easytags_dynamic_files = 1
let g:easytags_auto_highlight = 0
