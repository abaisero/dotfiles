########################
## FACILITY SHORTCUTS ##
########################

alias nb2md='jupyter nbconvert --to markdown'

alias bell='paplay /usr/share/sounds/freedesktop/stereo/complete.oga'

alias ci='catkin_init_workspace'
alias cm='catkin_make'

alias fpdb='~/git/fpdb/run_fpdb.py'

alias g4src_cfg='CreateSrcCfg'
alias g4hub_cfg='~/bin/G4DevCfg'
alias pr2lansetup='. /home/bais/SparkleShare/mlr_documents/doc/pr2/pr2lansetup'
alias pr2wlansetup='. /home/bais/SparkleShare/mlr_documents/doc/pr2/pr2wifisetup'
alias pr2dashboard='rosrun rqt_pr2_dashboard rqt_pr2_dashboard'
alias pr2teleop='roslaunch pr2_teleop teleop_joystick.launch'

alias baise.ro.push='ssh baise.ro "cd git/baise.ro; git pull"'

function h() {
  history | grep "$@"
}

alias tmux='tmux -2'
alias tn='tmux new -s'
# easy stuff
alias k='kill'
alias o='gnome-open'
alias u='. $HOME/.zshrc'
alias x='exit'
alias gt='gnome-terminal .'
alias nt='gnome-terminal .; exit'
alias ack='ack-grep --smart-case'
alias up='sudo apt-get update && sudo apt-get upgrade'
alias linux='lsb_release -a'
alias help='apropos'
alias soff='xset dpms force off'
alias lock='gnome-screensaver-command -l'
alias trash='sudo rm -rf $HOME/.local/share/Trash/*'

alias cmake-debug='\cmake -DCMAKE_BUILD_TYPE=Debug'
alias cmake-release='\cmake -DCMAKE_BUILD_TYPE=Release'
alias cmake-releasewithdebuginfo='\cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo'

alias catkin_make-debug='\catkin_make -DCMAKE_BUILD_TYPE=Debug'
alias catkin_make-release='\catkin_make -DCMAKE_BUILD_TYPE=Release'
alias catkin_make-releasewithdebuginfo='\cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo'

alias callgrind='valgrind --tool=callgrind'
# ROS
alias add_ros_package_path='export ROS_PACKAGE_PATH=$(pwd):"$ROS_PACKAGE_PATH"'

alias pstop='sudo killall -s SIGKILL -u'
alias pcont='sudo killall -s SIGCONT -u'

alias ueye_daemon='sudo /etc/init.d/ueyeusbdrc'
alias ueye_daemon_restart='ueye_daemon force-stop; ueye_daemon start'

alias ncores='cat /proc/cpuinfo | grep processor | wc -l'
alias nusers='who | cut -f1 -d\ | sort -u | wc -l'

alias arandr='arandr --force-version'

alias nautilus='nautilus --no-desktop'
alias pyprofile='python -m cProfile -o'
alias pyprofile_grid='pyprof2calltree -k -i'

function tmux-colors() {
  for i in {0..255} ; do
      printf "\x1b[38;5;${i}mcolour${i}\n"
  done
}

function note() {
  if [[ $# > 0 ]]
  then
    vim note:$1
  else
    basename -a $(find ~/notes -name '*.vim-note')
  fi
}

function timesheet_format() {
  pdfcrop --margins "20 0 20 0" $1 porcodio.pdf
  gs -o $1 -sDEVICE=pdfwrite -sPAPERSIZE=a4 -dFIXEDMEDIA -dPDFFitPage -dCompatibilityLevel=1.4 porcodio.pdf
  rm porcodio.pdf
}

function mount_samba_mlr() {
  mp=$HOME/mlr_misc
  [[ ! -e $mp ]] && mkdir $mp
  [[ ! -d $mp ]] && exit 1
  sudo mount -o user=baiseraa,uid=$UID,gid=$GID -t cifs //sambamlr/mlr_misc/ $mp
}

function nframes() {
  avconv -i $1 -vcodec copy -an -f null /dev/null 2>&1 | \
    grep 'frame=' |\
    cut -f 2 -d = |\
    awk '{print $1}'
}

alias packets='avprobe -show_packets'
alias stream='avprobe -show_streams'
function npackets() {
  echo $(avprobe -show_packets $1 2&>/dev/null | grep PACKET | wc -l)/2 | bc
}

alias mkdir='mkdir -p'
alias cp='cp -v'
alias mv='mv -v'
alias ls='ls -hl --color=auto'
alias lt='ls -rt'
alias ld='ls -l | grep \^d --color=never'
alias li='ls -i'

alias dev='ls /dev/sd*'
alias wan='dig +short myip.opendns.com @resolver1.opendns.com'

function copy() {
  cat $1 | xclip -i -selection clipboard
}

function swap() {
  tmp=$(mktemp)
  mv $1 $tmp && mv $2 $1 && mv $tmp $2
}

alias infvpn='sudo openconnect asa1.informatik.uni-stuttgart.de \
  -u baiseraa'
  # --script /etc/vpnc/vpnc-script'

# called after each cd
#function chpwd() {
#  emulate -L zsh
#  local nfiles
#  let "nfiles = $(ls -Al | wc -l) - 1"
#  if [[ $nfiles -le 20 ]]
#  then
#    ls -Al
#  else
#    echo "Number of files: $nfiles"
#  fi
#}

alias df='\df -hT --total'
alias du='\du -xh --total'
alias files='\du -xh -all -d 1 | sort -h'
alias free='\free -m'

# easy mod for this and other files
alias valias='vim ~/.bash_aliases'
alias vbash='vim ~/.bashrc'
alias vzsh='vim ~/.zshrc'
alias vvim='vim ~/.vimrc'
alias vemacs='vim ~/.emacs'
alias vbin='vim ~/bin/'
alias vtmux='vim ~/.tmux.conf'
alias vgit='vim ~/.gitconfig'
alias vgdb='vim ~/.gdbinit'
alias vros='vim ~/bin/ros'
alias vssh='vim ~/.ssh/config'

# TMUX aliases
alias tks='tmux kill-session'

                                    # opens awesome config file
alias vawesome='vim ~/.config/awesome/rc.lua'
alias vawesome.new='vim ~/.config/awesome/rc.lua.new'

# command-line matlab
alias methlab='matlab -nodesktop -nosplash'

# Staking a log file or other..
alias stalk='tail -f'

function tomp4() {
  avconv -i $1 -c:v copy $1.mp4
}

# create timestamped directory
function mkdate() {
  if [ $# -ne 1 ]
  then
    echo "Usage: mkdate <dirname>"
    return 1
  fi

  folder=$(date +$1.%F@%T.%N | rev | cut --complement -b -6 | rev)
  mkdir $folder
}
# take the backup of a set of files
function backup() {
  if [ $# = 0 ]
  then
    echo "Files missing. Aborting."
    return 1
  fi

  folder=$(date +backup.%F@%T.%N)
  mkdir $folder
  cp -rv $@ $folder

  if [ $? -ne 0 ]
  then
    echo "Error copying. Removing backup folder."
    rm -r $folder
    return 2
  fi
}

# alert comand. Visualizes alert window when command ends.
# Use like so:
#   sleep 3 | alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# find commands
function fback() {
  fname=$1
  folder=$PWD
  while true; do
    [ -e "$folder/$fname" ] && echo $folder && return 0
    [[ "$folder" == / ]] && return 1
    folder=$(dirname "$folder")
  done
}

# t commands
export TODO_DIR=$HOME/Dropbox/todo/
export TODO_FNAME=todo.txt
alias t.py='python "$HOME/git/t/t.py"'
alias t='t.py --task-dir "$(echo $TODO_DIR | tee /dev/tty)" --list $TODO_FNAME'
alias todo='t.py --task-dir "$(fback $TODO_FNAME || echo $PWD | tee /dev/tty)" --list $TODO_FNAME'

# function todo() {
#   fname='todo.t'
#   todir=$(pwd)
#   while [[ ! -e $todir/$fname ]]
#   do
#     if [[ "$todir" == / ]]
#     then 
#       todir=$(pwd)
#       break
#     fi
#     todir=$(dirname $todir)
#   done
#   python ~/git/t/t.py --task-dir $todir --list $fname
# }
# alias todo='echo $(fback todo.t)'
# alias todo='echo $(fback todo.t)'
# python ~/git/t/t.py --list todo.t'

function task_list() {
  echo $(cat ~/.bash_aliases | awk "/^alias $1=/ {split(\$0,A);print A[NF]}") | sed "s/'//g"
}

function num_tasks() {
  echo $(cat $T_DIR/$(echo $(task_list $1)) 2>/dev/null | wc -l)
}

function task_lists() {
  for i in $(task_cmds)
  do
    echo $(cat ~/.bash_aliases | awk '/^alias '$i'=/ { split($0,A); print A[NF] }') | sed s/\'//g
  done
}

###################
## MLR Utilities ##
###################

alias timecheat-help='~/git/timecheat/timecheat.py -h'

function timecheat() {
  local DIR=/tmp/timecheat
  local FILENAME=$(date +timesheet_%m_%y_%R)
  local TEX=$FILENAME.tex
  local PDF=$FILENAME.pdf
  mkdir -p $DIR
  ~/git/timecheat/timecheat.py --start 9.5 --pausestart 12.5 \
    --variance .2 --holidays ~/git/timecheat/holidays* \
    --unholidays ~/git/timecheat/unholidays* --output template \
    --template ~/git/timecheat/worksheet.tex $@ > $DIR/$TEX
  pdflatex -output-directory $DIR $TEX
  mv $DIR/$PDF ~/mlr/timesheet/
}

function mlr_all() {
  cat *.markdown | pandoc -o all.html;
  gnome-open all.html &
}

function mlr_new() {
  FILE=`date +%y`.markdown
  cp -f $FILE $FILE.bak
  echo '# ' `date '+%b %e, %Y, %H:%M'` > $FILE
  cat $FILE.bak >> $FILE
  vim $FILE
}

############################
## COMMAND LINE UTILITIES ##
############################

# repeats a command a number of times
function repeat() {
  echo $#
  echo $@
  if [ $# -gt 1 ]
  then
    n=$1
    shift
    while [ n-- -ge 0 ]
    do
      "$@"
    done
  fi
}

##############
## NETWORKS ##
##############

# sets up internet for HTML login
# (could be improved in terms of user and password)
internet() {
  cd ~/Scripts/clientSSL
  java ClientSSL
}

#############################
## COMMAND LINE NAVIGATION ##
#############################

# copy and paste from the command line
c() {
  rm -r /tmp/ccopy.*
  cp -r $1 /tmp/ccopy.$1
}

v() {
  ccopy=$(find /tmp/ -name 'ccopy.*')
  fname=$1
  if [[ $# -eq 0 ]]
  then
    fname=$(echo $ccopy | sed 's/^[^\.]*.//')
  fi
  cp -r $ccopy $fname
}

# # NB the next functions are supposed to work together
# # change to a new dir, pushing the current dir onto the stack
# pushd() {
#   export DS = "$PWD:$DS"
#   if [ -n "$1" ]
#   then
#     cd "$1"
#   else
#     cd
#   fi
#   if [ $? -ne 0 ]
#   then
#     export DS="${DS#*:}"
#   fi
# }

# # pop top dir off stack and cd to it
# popd() {
#   if [ "$DS" ]
#   then
#     cd "${DS%%:*}"
#     export DS="${DS#*:}"
#   else
#     echo "$FUNCNAME: empty directory stack" >&2
#   fi
# }

# # print directory stack
# printd() {
#   IFS = :;
#   for each in $DS
#   do
#     echo $each;
#   done
# }

# # flip back-and-forth between current dir and top of stack (like "cd -")
# flipd() {
#   if [ "$DS" ]
#   then
#     cd "${DS%%:*}"
#     export DS="$OLDPWD:${DS#*:}"
#   else
#     echo "$FUNCNAME: empty directory stack" >&2
#   fi
# }

# # rotate through directory stack (from bottom to top)
# rotd() {
#   if [ "$DS" ]
#   then
#     typeset DSr="${DS%:*:}"
#     [ "${DSr}" = "${DS}" ] || export DS="${DS##${DSr}:}$DSr:"
#     flipd
#   else
#     echo "$FUNCNAME: directory stack is empty" >&2
#   fi
# }

# # NB next two functions are unrelated with the above
# # save current directory for in between sessions
# saved() {
#   if [ ${PWD} != ${HOME} ]
#   then
#     pwd >~/.lastdir;
#   fi
# }

# # load and move to last saved directory
# lastd() {
#   cd $(cat ~/.lastdir)
# }

# # edit directory stack
# editd() {
#   export EDITDNO = $(${EDITDNO:=0} + 1)
#   typeset FiLe = /tmp/$(basename -- $0)$$.${EDITDNO}
#   printd >${FiLe}
#   vim ${FiLe}
#   DS=$(while read ea; do echo -n "$ea:"; done <${FiLe})
#   rm -f ${FiLe}
# }

########################
## SCREEN ORIENTATION ##
########################

# Also requires
#   Option "RandRRotation" "on"
# in /etc/X11/xorg.conf

alias topup='xrandr -o normal'
alias topdown='xrandr -o inverted'
alias topright='xrandr -o right'
alias topleft='xrandr -o left'

###########
## MISC. ##
###########

###

alias google='ping www.google.com'

###

alias nexus-connect="mtpfs -o allow_user /media/nexus"
alias nexus-disconnect="fusermount -u /media/nexus"

### funny telnets

alias nyan='telnet nyancat.dakko.us'
